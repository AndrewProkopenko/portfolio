{"version":3,"sources":["Components/Header.js","Components/WorkCategoryConteiner.js","Components/Works.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","WorkCategoryConteiner","props","data","map","item","index","key","src","window","location","origin","img","alt","Works","useState","activeTab","setActiveTab","hendlerTabs","e","preventDefault","value","Number","target","getAttribute","isActive","id","onClick","to","data-tab-btn","VueData","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kUA8CeA,MA5Cf,WACI,OACI,yBAAKC,UAAU,uBACf,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,2BAET,yCAGA,sDAMR,yBAAKA,UAAU,wB,QCAZC,MAjBf,SAA+BC,GAI3B,OACI,6BAEQA,EAAMC,KAAKC,KAAK,SAACC,EAAMC,GAAP,OACZ,yBAAKC,IAAKD,GACN,yBAAKE,IAAKC,OAAOC,SAASC,OAAhB,eAAiCN,EAAKO,KAAOC,IAAK,iB,QCsDrEC,MA1Df,WAAkB,IAAD,EACqBC,mBAAS,GAD9B,mBACNC,EADM,KACKC,EADL,KAGb,SAASC,EAAYC,GACjBA,EAAEC,iBACF,IAAMC,EAAQC,OAAOH,EAAEI,OAAOC,aAAa,iBAC3CP,EAAaI,GAGjB,SAASI,EAASC,GACd,GAAGA,IAAOV,EACV,MAAO,SAIX,OACI,yBAAKhB,UAAU,mBACf,yBAAKA,UAAU,aACb,yBAAKA,UAAU,wBACX,oDACwB,6BADxB,iCAIA,4BACI,wBAAIA,UAAU,SAAS2B,QAAST,GAC5B,kBAAC,IAAD,CAAMU,GAAG,IAAI5B,UAAS,UAAKyB,EAAS,IAAME,QAAST,EAAaW,eAAe,KAA/E,UAIJ,4BACI,kBAAC,IAAD,CAAMD,GAAG,IAAI5B,UAAS,UAAKyB,EAAS,IAAME,QAAST,EAAaW,eAAe,KAA/E,QAIJ,4BACI,kBAAC,IAAD,CAAMD,GAAG,IAAI5B,UAAS,UAAKyB,EAAS,IAAME,QAAST,EAAaW,eAAe,KAA/E,WAMZ,yBAAK7B,UAAU,2BAEX,yBAAKA,UAAS,sCAAiCyB,EAAS,KACtD,kBAAC,EAAD,CAAuBtB,KAAM2B,KAE/B,yBAAK9B,UAAS,sCAAiCyB,EAAS,KACpD,4CAEJ,yBAAKzB,UAAS,sCAAiCyB,EAAS,KACpD,gDCjCHM,MAhBf,WAGE,OACE,kBAAC,IAAD,KAEC,kBAAC,EAAD,MACA,kBAAC,EAAD,QCHeC,QACW,cAA7BvB,OAAOC,SAASuB,UAEe,UAA7BxB,OAAOC,SAASuB,UAEhBxB,OAAOC,SAASuB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3cf78821.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"  portfolio-header \">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-12 col-md-6\">\r\n              <div className=\" portfolio-header-title\">\r\n                    \r\n                    <h1>\r\n                      Portfolio\r\n                    </h1>\r\n                    <h5>\r\n                      by Andrew Prokopenko\r\n                    </h5>\r\n                </div> \r\n            </div>\r\n\r\n            <div className=\"col-12 col-md-6\">\r\n              {/* <div className=\" portfolio-header-menu\">\r\n                <ul>\r\n                  <li>\r\n                    <Link> \r\n                      Works\r\n                    </Link> \r\n                  </li>\r\n                  <li>\r\n                      <Link> \r\n                        Contacts\r\n                      </Link> \r\n                  </li>\r\n                  <li>\r\n                    <Link> \r\n                        About\r\n                    </Link>\r\n                  </li>\r\n                </ul>\r\n              </div> */}\r\n          </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nfunction WorkCategoryConteiner(props) {\r\n    // React.useEffect( () => { \r\n    //     console.log(props.data)\r\n    // })\r\n    return (\r\n        <div>\r\n            {\r\n                props.data.map( (item, index) => ( \r\n                    <div key={index}>\r\n                        <img src={window.location.origin + `/img/${item.img}`} alt={'no img'} />\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WorkCategoryConteiner\r\n","import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom' \r\n\r\nimport WorkCategoryConteiner from './WorkCategoryConteiner'\r\n\r\nimport VueData from  '../data/vue-data.json'\r\n\r\nfunction Works() {\r\n    const [activeTab, setActiveTab] = useState(1)\r\n \r\n    function hendlerTabs(e) {  \r\n        e.preventDefault()\r\n        const value = Number(e.target.getAttribute('data-tab-btn'))  \r\n        setActiveTab(value)\r\n    }\r\n\r\n    function isActive(id) {\r\n        if(id === activeTab ) { \r\n        return 'active'\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='portfolio-works'>  \r\n        <div className=\"container\">\r\n          <div className=\"portfolio-works_head\">\r\n              <p>\r\n                Works presented here, <br/>\r\n                click for more view on GitHub \r\n              </p>\r\n              <ul>\r\n                  <li className=\"active\" onClick={hendlerTabs}>\r\n                      <Link to=\"#\" className={`${isActive(1)}`} onClick={hendlerTabs} data-tab-btn = '1'>\r\n                          React \r\n                      </Link>\r\n                  </li>\r\n                  <li >\r\n                      <Link to=\"#\" className={`${isActive(2)}`} onClick={hendlerTabs} data-tab-btn = '2'>\r\n                        Vue \r\n                      </Link>\r\n                  </li>\r\n                  <li  >\r\n                      <Link to=\"#\" className={`${isActive(3)}`} onClick={hendlerTabs} data-tab-btn = '3'>\r\n                          HTML \r\n                      </Link>\r\n                  </li>\r\n              </ul> \r\n          </div>\r\n          <div className=\"portfolio-works_content\">\r\n            \r\n              <div className={`portfolio-works_content-box ${isActive(1)}`}>\r\n                <WorkCategoryConteiner data={VueData}  />\r\n              </div>\r\n              <div className={`portfolio-works_content-box ${isActive(2)}`}>\r\n                  <span>contacts2</span>\r\n              </div>\r\n              <div className={`portfolio-works_content-box ${isActive(3)}`}>\r\n                  <span>contacts3</span>\r\n              </div>\r\n          </div>\r\n        </div> \r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Works\r\n","import React from 'react'; \nimport { \n  BrowserRouter as Router\n} from 'react-router-dom' \n\nimport Header from './Components/Header'\nimport Works from './Components/Works'\n\nfunction App() {\n   \n\n  return (\n    <Router>\n     \n     <Header/>\n     <Works/>\n         \n     \n      \n    \n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/scss/style.scss'; \nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}